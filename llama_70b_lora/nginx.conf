worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;

    upstream backend {
        server localhost:8000;
    }

    # Map directive to set content type based on stream parameter
    map $arg_stream $proxy_content_type {
        "true"    "text/event-stream";
        default   "application/json";
    }

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    error_log /var/log/nginx/error.log info;
    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen 80;
        client_max_body_size 200M;

        location /readiness {
            proxy_intercept_errors on;
            proxy_pass http://127.0.0.1:8000/health;
            error_page 400 401 402 403 404 500 501 502 503 504 =503 @unhealthy;
        }

        location @unhealthy {
            return 503 "not ready";
            add_header Content-Type text/plain;
        }

        # Chat completions endpoint with streaming support
        location = /v1/chat/completions {
            client_body_buffer_size 10m;
            client_max_body_size 10m;

            access_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                
                if body then
                    local cjson = require "cjson"
                    local parsed_body = cjson.decode(body)
                    local model = parsed_body["model"]
                    
                    -- Create lora adapter request
                    local new_body = {
                        lora_name = model,
                        lora_path = model
                    }
                    
                    -- Check lora adapter
                    local res = ngx.location.capture('/v1/load_lora_adapter', {
                        method = ngx.HTTP_POST,
                        body = cjson.encode(new_body),
                        headers = {
                            ["Content-Type"] = "application/json"
                        }
                    })
                    
                    if res.status ~= 200 and res.status ~= 400 then
                        ngx.status = res.status
                        ngx.header["Content-Type"] = "application/json"
                        ngx.say(res.body)
                        ngx.exit(res.status)
                    end
                    
                    -- Store the original body for proxying
                    ngx.req.set_body_data(body)
                end
            }

            # Proxy to backend with streaming support
            proxy_pass http://backend/v1/chat/completions;
            
            # Streaming configurations
            proxy_http_version 1.1;
            proxy_set_header Connection '';
            proxy_set_header Content-Type $proxy_content_type;
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 300s;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Set response content type
            add_header Content-Type $proxy_content_type;
        }

        location /v1/load_lora_adapter {
            internal;
            proxy_pass http://backend/v1/load_lora_adapter;
            proxy_set_header Host $host;
            proxy_set_header Content-Type application/json;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            proxy_pass http://backend;
            proxy_pass_header Content-Type;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}