worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    lua_shared_dict cache 10m;

    upstream backend {
        server localhost:8000;
    }

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen 80;
        client_max_body_size 200M;

        location /readiness {
            proxy_intercept_errors on;
            proxy_pass http://127.0.0.1:8000/health;
            # If ANY error or non-2xx/3xx status occurs, return 503:
            error_page 400 401 402 403 404 500 501 502 503 504 =503 @unhealthy;
        }

        # "Catch" the error code and return 503
        location @unhealthy {
            return 503 "not ready";
            add_header Content-Type text/plain;
        }

        location /v1/chat/completions {
            client_body_buffer_size 10m;
            client_max_body_size 10m;
            
            content_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                
                if body then
                    local cjson = require "cjson"
                    local parsed_body = cjson.decode(body)
        
                    -- Extract model parameter
                    local model = parsed_body["model"]
                    
                    -- Create new body
                    local new_body = {
                        lora_name = model,
                        lora_path = model
                    }
                    ngx.log(ngx.INFO, "Request body: ", body)
                    
                    -- Forward to lora adapter first
                    local res = ngx.location.capture('/v1/load_lora_adapter', {
                        method = ngx.HTTP_POST,
                        body = cjson.encode(new_body),
                        headers = {
                            ["Content-Type"] = "application/json"
                        }
                    })
                    
                    if res.status == 200 or res.status == 400 then
                        -- Forward to backend
                        local backend_res = ngx.location.capture('/proxy_to_backend', {
                            method = ngx.HTTP_POST,
                            body = body
                        })
                        
                        ngx.status = backend_res.status
                        ngx.say(backend_res.body)
                    else
                        ngx.status = res.status
                        ngx.say(res.body)
                    end
                else
                    ngx.status = 400
                    ngx.say("Missing request body")
                    ngx.exit(400)
                end
            }
        }

        location /v1/load_lora_adapter {
            internal;
            proxy_pass http://backend/v1/load_lora_adapter;
            proxy_set_header Host $host;
            proxy_set_header Content-Type application/json;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /proxy_to_backend {
            internal;
            proxy_pass http://backend/v1/chat/completions;
            proxy_set_header Content-Type application/json;
            add_header Content-Type application/json;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location / {
            proxy_pass http://backend;
            proxy_pass_header Content-Type;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

    }
}